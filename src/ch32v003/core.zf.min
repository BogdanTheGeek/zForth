: emit 0 sys ;
: . 1 sys ;
: tell 2 sys ;
: ! 0 !! ;
: @ 0 @@ ;
: , 0 ,, ;
: # 0 ## ;
: !j	 64 !! ;
: ,j	 64 ,, ;
: [ 0 compiling ! ; immediate
: ] 1 compiling ! ;
: postpone 1 _postpone ! ; immediate
: 1+ 1 + ;
: 1- 1 - ;
: over 1 pick ;
: +! dup @ rot + swap ! ;
: inc 1 swap +! ;
: dec -1 swap +! ;
: < - <0 ;
: > swap < ;
: <= over over >r >r < r> r> = + ;
: >= swap <= ;
: =0 0 = ;
: not =0 ;
: != = not ;
: cr 10 emit ;
: br 32 emit ;
: .. dup . ;
: here h @ ;
: allot h +! ;
: var : ' lit , here 5 allot here swap ! 5 allot postpone ; ;
: const : ' lit , , postpone ; ;
: begin here ; immediate
: again ' jmp , , ; immediate
: until ' jmp0 , , ; immediate
: { ( -- ) ' lit , 0 , ' >r , here ; immediate
: x} ( -- ) ' r> , ' 1+ , ' dup , ' >r , ' = , postpone until ' r> , ' drop , ; immediate
: exe ( XT -- ) ' lit , here dup , ' >r , ' >r , ' exit , here swap ! ; immediate
: times ( XT n -- ) { >r dup >r exe r> r> dup x} drop drop ;
: if ' jmp0 , here 0 ,j ; immediate
: unless ' not , postpone if ; immediate
: else ' jmp , here 0 ,j swap here swap !j ; immediate
: fi here swap !j ; immediate
: i ' lit , 0 , ' pickr , ; immediate
: j ' lit , 2 , ' pickr , ; immediate
: do ' swap , ' >r , ' >r , here ; immediate
: loop+ ' r> , ' + , ' dup , ' >r , ' lit , 1 , ' pickr , ' >= , ' jmp0 , , ' r> , ' drop , ' r> , ' drop , ; immediate
: loop ' lit , 1 , postpone loop+ ; immediate
: s" compiling @ if ' lits , here 0 , fi here begin key dup 34 = if drop
 compiling @ if here swap - swap ! else dup here swap - fi exit else , fi
 again ; immediate
: ." compiling @ if postpone s" ' tell , else begin key dup 34 = if drop exit else emit fi again
 fi ; immediate
