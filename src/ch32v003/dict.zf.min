: next dup # + ;
: name dup @ 31 & swap next dup next rot tell @ ;
: words latest @ begin name br dup 0 = until cr drop ;
: prim? @ 32 & ;
: a->xt dup dup @ 31 & swap next next + swap prim? if @ fi ;
: xt->a latest @ begin dup a->xt 2 pick = if swap drop exit fi next @ dup 0 = until swap drop ;
: lit?jmp? dup @ dup 1 = swap dup 18 = swap 19 = + + ;
: disas dup dup . br br @ xt->a name drop lit?jmp? if br next dup @ . fi cr ;
: see dup xt->a name cr drop begin disas next dup @ =0 until drop ;
: hex_t ' lit ,  here dup , s" 0123456789abcdef" allot swap ! ; immediate
: *hex_t hex_t ;
: .hex *hex_t + @ emit ;
: >nib dup 15 & swap -16 & 16 / ;
: ffemit >nib .hex .hex ;
: ffffemit >nib >nib >nib { .hex 4 x} ;
: @LSB 2 @@ 255 & ;
: between? 2 pick > rot rot > & ; 
: 8hex { dup @LSB ffemit 32 emit 1+ 8 x} 32 emit ;
: 16ascii 124 emit { dup @LSB dup 31 127 between? if emit else drop 46 emit fi 1+ 16 x} 124 emit ;
: .addr ffffemit ."    " ;
: 16line dup .addr dup { 8hex 2 x} drop 16ascii cr ;
: dump over + swap begin 16line over over < until drop drop ; 
